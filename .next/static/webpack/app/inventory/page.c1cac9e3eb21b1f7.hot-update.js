"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/inventory/page",{

/***/ "(app-pages-browser)/./components/modules/uv-crm/components/MediaUploader.tsx":
/*!****************************************************************!*\
  !*** ./components/modules/uv-crm/components/MediaUploader.tsx ***!
  \****************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ MediaUploader)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _lib_supabaseClient__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/supabaseClient */ \"(app-pages-browser)/./lib/supabaseClient.ts\");\n\nvar _s = $RefreshSig$();\n\n\n// Function to convert image to specific ratio while maintaining transparency\nconst processImageToRatio = async function(file, targetWidth, targetHeight) {\n    let addBackground = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;\n    return new Promise((resolve)=>{\n        const canvas = document.createElement('canvas');\n        const ctx = canvas.getContext('2d');\n        const img = new Image();\n        img.onload = ()=>{\n            canvas.width = targetWidth;\n            canvas.height = targetHeight;\n            if (!ctx) {\n                resolve(file); // fallback to original if canvas context fails\n                return;\n            }\n            // Add background only if requested (for main version)\n            if (addBackground) {\n                // Create light grey gradient background\n                const gradient = ctx.createLinearGradient(0, 0, 0, canvas.height);\n                gradient.addColorStop(0, '#f8f8f8'); // Very light grey at top\n                gradient.addColorStop(0.5, '#e8e8e8'); // Light grey in middle\n                gradient.addColorStop(1, '#d8d8d8'); // Medium light grey at bottom\n                // Fill background with gradient\n                ctx.fillStyle = gradient;\n                ctx.fillRect(0, 0, canvas.width, canvas.height);\n            }\n            // Calculate scaling to fit image within canvas while maintaining aspect ratio\n            const imgAspectRatio = img.width / img.height;\n            const canvasAspectRatio = targetWidth / targetHeight;\n            let drawWidth, drawHeight, offsetX, offsetY;\n            if (imgAspectRatio > canvasAspectRatio) {\n                // Image is wider - fit to width\n                drawWidth = targetWidth;\n                drawHeight = targetWidth / imgAspectRatio;\n                offsetX = 0;\n                offsetY = (targetHeight - drawHeight) / 2;\n            } else {\n                // Image is taller - fit to height\n                drawWidth = targetHeight * imgAspectRatio;\n                drawHeight = targetHeight;\n                offsetX = (targetWidth - drawWidth) / 2;\n                offsetY = 0;\n            }\n            // Draw the image centered on the canvas\n            ctx.drawImage(img, offsetX, offsetY, drawWidth, drawHeight);\n            // Convert canvas to file\n            canvas.toBlob((blob)=>{\n                if (blob) {\n                    const suffix = addBackground ? '_with_bg' : targetWidth === targetHeight ? '_square' : '_4x5';\n                    const newFile = new File([\n                        blob\n                    ], file.name.replace(/\\.png$/i, \"\".concat(suffix, \".png\")), {\n                        type: 'image/png',\n                        lastModified: Date.now()\n                    });\n                    resolve(newFile);\n                } else {\n                    resolve(file); // fallback to original\n                }\n            }, 'image/png', 0.95);\n        };\n        img.onerror = ()=>{\n            resolve(file); // fallback to original if image loading fails\n        };\n        img.src = URL.createObjectURL(file);\n    });\n};\n// Function to check if PNG has transparency\nconst hasPngTransparency = async (file)=>{\n    if (!file.type.includes('png')) {\n        console.log(\"File \".concat(file.name, \" is not PNG, skipping transparency check\"));\n        return false;\n    }\n    return new Promise((resolve)=>{\n        const canvas = document.createElement('canvas');\n        const ctx = canvas.getContext('2d');\n        const img = new Image();\n        img.onload = ()=>{\n            canvas.width = img.width;\n            canvas.height = img.height;\n            if (!ctx) {\n                console.log(\"Failed to get canvas context for \".concat(file.name));\n                resolve(false);\n                return;\n            }\n            ctx.drawImage(img, 0, 0);\n            try {\n                const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n                const data = imageData.data;\n                let transparentPixels = 0;\n                let totalPixels = data.length / 4;\n                // Check for any pixels with alpha < 255 (transparency)\n                for(let i = 3; i < data.length; i += 4){\n                    if (data[i] < 255) {\n                        transparentPixels++;\n                    }\n                }\n                const hasTransparency = transparentPixels > 0;\n                console.log(\"Transparency analysis for \".concat(file.name, \": \").concat(transparentPixels, \"/\").concat(totalPixels, \" transparent pixels, result: \").concat(hasTransparency));\n                resolve(hasTransparency);\n            } catch (error) {\n                console.log(\"Error checking transparency for \".concat(file.name, \":\"), error);\n                // If we can't access image data (CORS, etc.), assume it has transparency to be safe\n                console.log(\"Assuming transparency for \".concat(file.name, \" due to access error\"));\n                resolve(true);\n            }\n        };\n        img.onerror = (error)=>{\n            console.log(\"Error loading image \".concat(file.name, \" for transparency check:\"), error);\n            resolve(false);\n        };\n        img.src = URL.createObjectURL(file);\n    });\n};\nfunction MediaUploader(param) {\n    let { carId, onUploaded } = param;\n    _s();\n    const [uploading, setUploading] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [progress, setProgress] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0);\n    const [totalFiles, setTotalFiles] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0);\n    const [failedFiles, setFailedFiles] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [retrying, setRetrying] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const handleFiles = async (e)=>{\n        const files = Array.from(e.target.files || []);\n        if (!files.length) return;\n        setUploading(true);\n        setTotalFiles(files.length);\n        setProgress(0);\n        setFailedFiles([]);\n        let failed = [];\n        for(let idx = 0; idx < files.length; idx++){\n            const file = files[idx];\n            if (file.type.startsWith('image')) {\n                try {\n                    // Check if PNG has transparency and process accordingly\n                    if (file.type.includes('png')) {\n                        console.log(\"PNG file detected: \".concat(file.name, \", checking transparency...\"));\n                        const hasTransparency = await hasPngTransparency(file);\n                        console.log(\"Transparency check result for \".concat(file.name, \": \").concat(hasTransparency));\n                        if (hasTransparency) {\n                            console.log(\"Processing transparent PNG: \".concat(file.name, \" into 3 versions\"));\n                            // Create 3 versions for transparent PNGs\n                            const versions = [\n                                {\n                                    file: await processImageToRatio(file, 1600, 1200, true),\n                                    kind: 'photo',\n                                    name: 'Main (with background)',\n                                    metadata: 'main'\n                                },\n                                {\n                                    file: await processImageToRatio(file, 1080, 1350, false),\n                                    kind: 'photo',\n                                    name: '4:5 Ratio (transparent)',\n                                    metadata: '4x5'\n                                },\n                                {\n                                    file: await processImageToRatio(file, 1080, 1080, false),\n                                    kind: 'photo',\n                                    name: 'Square (transparent)',\n                                    metadata: 'square'\n                                }\n                            ];\n                            console.log(\"Created \".concat(versions.length, \" versions for \").concat(file.name));\n                            // Upload all 3 versions\n                            for (const version of versions){\n                                console.log(\"Uploading \".concat(version.name, \" as \").concat(version.kind));\n                                await uploadSingleVersion(version.file, version.kind, file, idx, failed);\n                            }\n                        } else {\n                            console.log(\"Non-transparent PNG: \".concat(file.name, \", uploading original only\"));\n                            // Non-transparent PNG - just upload original\n                            await uploadSingleVersion(file, 'photo', file, idx, failed);\n                        }\n                    } else {\n                        console.log(\"Non-PNG image: \".concat(file.name, \", uploading original only\"));\n                        // Non-PNG image - just upload original\n                        await uploadSingleVersion(file, 'photo', file, idx, failed);\n                    }\n                } catch (err) {\n                    console.warn('Image processing failed, uploading original', err);\n                    await uploadSingleVersion(file, 'photo', file, idx, failed);\n                }\n            } else {\n                // Non-image file (video, etc.)\n                await uploadSingleVersion(file, file.type.startsWith('video') ? 'video' : 'document', file, idx, failed);\n            }\n            setProgress(Math.round((idx + 1) / files.length * 100));\n        }\n        setProgress(100);\n        setTimeout(()=>{\n            setUploading(false);\n            setProgress(0);\n            setTotalFiles(0);\n            if (onUploaded) onUploaded();\n        }, 800);\n        e.target.value = '';\n    };\n    // Helper function to upload a single version\n    const uploadSingleVersion = async (uploadFile, kind, originalFile, idx, failedArray)=>{\n        console.log(\"Starting upload: kind=\".concat(kind, \", originalFile=\").concat(originalFile.name, \", uploadFile size=\").concat(uploadFile.size));\n        const ext = originalFile.name.split('.').pop();\n        const path = \"\".concat(carId, \"/\").concat(crypto.randomUUID(), \".\").concat(ext);\n        // Check if car already has media\n        const { count: photoCount } = await _lib_supabaseClient__WEBPACK_IMPORTED_MODULE_2__.supabase.from('car_media').select('*', {\n            head: true,\n            count: 'exact'\n        }).eq('car_id', carId).eq('kind', 'photo'); // Only count main photos for primary determination\n        const isFirstPhoto = kind === 'photo' && (!photoCount || photoCount === 0);\n        console.log(\"Upload details: path=\".concat(path, \", kind=\").concat(kind, \", isFirstPhoto=\").concat(isFirstPhoto));\n        // Upload to Storage bucket 'car-media'\n        const { error: upErr } = await _lib_supabaseClient__WEBPACK_IMPORTED_MODULE_2__.supabase.storage.from('car-media').upload(path, uploadFile, {\n            contentType: uploadFile.type || originalFile.type,\n            cacheControl: '3600',\n            upsert: false\n        });\n        if (upErr) {\n            console.log(\"Upload failed for \".concat(kind, \":\"), upErr.message);\n            failedArray.push({\n                file: originalFile,\n                error: upErr.message\n            });\n            setFailedFiles([\n                ...failedArray\n            ]);\n            return;\n        }\n        console.log(\"Storage upload successful for \".concat(kind));\n        // Get permanent public URL\n        const { data: pub } = _lib_supabaseClient__WEBPACK_IMPORTED_MODULE_2__.supabase.storage.from('car-media').getPublicUrl(path);\n        const url = pub.publicUrl;\n        // Store the public URL in DB with proper kind and sort_order\n        const { error: dbError } = await _lib_supabaseClient__WEBPACK_IMPORTED_MODULE_2__.supabase.from('car_media').insert({\n            car_id: carId,\n            kind: kind,\n            url,\n            is_primary: isFirstPhoto,\n            sort_order: idx\n        });\n        if (dbError) {\n            console.log(\"Database insert failed for \".concat(kind, \":\"), dbError);\n        } else {\n            console.log(\"Successfully saved \".concat(kind, \" to database: \").concat(url));\n        }\n    };\n    const retryFailed = async ()=>{\n        if (!failedFiles.length) return;\n        setRetrying(true);\n        // Retry only failed files\n        const filesToRetry = failedFiles.map((f)=>f.file);\n        setFailedFiles([]);\n        await handleFiles({\n            target: {\n                files: filesToRetry\n            }\n        });\n        setRetrying(false);\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"space-y-1\",\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"label\", {\n                className: \"block text-white/70 text-xs\",\n                children: \"Upload Photos / Videos\"\n            }, void 0, false, {\n                fileName: \"/Volumes/SilberArrows/CODEBASE/silberarrows_uv/components/modules/uv-crm/components/MediaUploader.tsx\",\n                lineNumber: 303,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"input\", {\n                type: \"file\",\n                multiple: true,\n                accept: \"image/*,video/*\",\n                onChange: handleFiles,\n                disabled: uploading || retrying,\n                className: \"text-white text-xs\"\n            }, void 0, false, {\n                fileName: \"/Volumes/SilberArrows/CODEBASE/silberarrows_uv/components/modules/uv-crm/components/MediaUploader.tsx\",\n                lineNumber: 304,\n                columnNumber: 7\n            }, this),\n            uploading && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"w-full bg-gray-700/50 h-3 rounded overflow-hidden relative\",\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"bg-red-500 h-3 transition-all\",\n                        style: {\n                            width: \"\".concat(progress, \"%\")\n                        }\n                    }, void 0, false, {\n                        fileName: \"/Volumes/SilberArrows/CODEBASE/silberarrows_uv/components/modules/uv-crm/components/MediaUploader.tsx\",\n                        lineNumber: 314,\n                        columnNumber: 11\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                        className: \"absolute inset-0 text-[10px] flex items-center justify-center text-white/80\",\n                        children: [\n                            Math.max(progress, 1),\n                            \"% (\",\n                            Math.round(progress / 100 * totalFiles),\n                            \"/\",\n                            totalFiles,\n                            \")\"\n                        ]\n                    }, void 0, true, {\n                        fileName: \"/Volumes/SilberArrows/CODEBASE/silberarrows_uv/components/modules/uv-crm/components/MediaUploader.tsx\",\n                        lineNumber: 318,\n                        columnNumber: 11\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"/Volumes/SilberArrows/CODEBASE/silberarrows_uv/components/modules/uv-crm/components/MediaUploader.tsx\",\n                lineNumber: 313,\n                columnNumber: 9\n            }, this),\n            failedFiles.length > 0 && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"mt-2 text-xs text-red-400\",\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        children: \"Failed to upload:\"\n                    }, void 0, false, {\n                        fileName: \"/Volumes/SilberArrows/CODEBASE/silberarrows_uv/components/modules/uv-crm/components/MediaUploader.tsx\",\n                        lineNumber: 325,\n                        columnNumber: 11\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"ul\", {\n                        className: \"list-disc ml-4\",\n                        children: failedFiles.map((param, idx)=>{\n                            let { file, error } = param;\n                            return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"li\", {\n                                children: [\n                                    file.name,\n                                    \": \",\n                                    error\n                                ]\n                            }, idx, true, {\n                                fileName: \"/Volumes/SilberArrows/CODEBASE/silberarrows_uv/components/modules/uv-crm/components/MediaUploader.tsx\",\n                                lineNumber: 328,\n                                columnNumber: 15\n                            }, this);\n                        })\n                    }, void 0, false, {\n                        fileName: \"/Volumes/SilberArrows/CODEBASE/silberarrows_uv/components/modules/uv-crm/components/MediaUploader.tsx\",\n                        lineNumber: 326,\n                        columnNumber: 11\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                        className: \"mt-1 px-2 py-1 bg-red-600 text-white rounded text-xs hover:bg-red-700\",\n                        onClick: retryFailed,\n                        disabled: retrying,\n                        children: retrying ? 'Retrying...' : 'Retry Failed Uploads'\n                    }, void 0, false, {\n                        fileName: \"/Volumes/SilberArrows/CODEBASE/silberarrows_uv/components/modules/uv-crm/components/MediaUploader.tsx\",\n                        lineNumber: 331,\n                        columnNumber: 11\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"/Volumes/SilberArrows/CODEBASE/silberarrows_uv/components/modules/uv-crm/components/MediaUploader.tsx\",\n                lineNumber: 324,\n                columnNumber: 9\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"/Volumes/SilberArrows/CODEBASE/silberarrows_uv/components/modules/uv-crm/components/MediaUploader.tsx\",\n        lineNumber: 302,\n        columnNumber: 5\n    }, this);\n}\n_s(MediaUploader, \"8VQVnNzTH/Y7+g0IosAIAGTctC0=\");\n_c = MediaUploader;\nvar _c;\n$RefreshReg$(_c, \"MediaUploader\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2NvbXBvbmVudHMvbW9kdWxlcy91di1jcm0vY29tcG9uZW50cy9NZWRpYVVwbG9hZGVyLnRzeCIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7O0FBQWlDO0FBQ2U7QUFPaEQsNkVBQTZFO0FBQzdFLE1BQU1FLHNCQUFzQixlQUFPQyxNQUFZQyxhQUFxQkM7UUFBc0JDLGlGQUF5QjtJQUNqSCxPQUFPLElBQUlDLFFBQVEsQ0FBQ0M7UUFDbEIsTUFBTUMsU0FBU0MsU0FBU0MsYUFBYSxDQUFDO1FBQ3RDLE1BQU1DLE1BQU1ILE9BQU9JLFVBQVUsQ0FBQztRQUM5QixNQUFNQyxNQUFNLElBQUlDO1FBRWhCRCxJQUFJRSxNQUFNLEdBQUc7WUFDWFAsT0FBT1EsS0FBSyxHQUFHYjtZQUNmSyxPQUFPUyxNQUFNLEdBQUdiO1lBRWhCLElBQUksQ0FBQ08sS0FBSztnQkFDUkosUUFBUUwsT0FBTywrQ0FBK0M7Z0JBQzlEO1lBQ0Y7WUFFQSxzREFBc0Q7WUFDdEQsSUFBSUcsZUFBZTtnQkFDakIsd0NBQXdDO2dCQUN4QyxNQUFNYSxXQUFXUCxJQUFJUSxvQkFBb0IsQ0FBQyxHQUFHLEdBQUcsR0FBR1gsT0FBT1MsTUFBTTtnQkFDaEVDLFNBQVNFLFlBQVksQ0FBQyxHQUFHLFlBQWEseUJBQXlCO2dCQUMvREYsU0FBU0UsWUFBWSxDQUFDLEtBQUssWUFBWSx1QkFBdUI7Z0JBQzlERixTQUFTRSxZQUFZLENBQUMsR0FBRyxZQUFjLDhCQUE4QjtnQkFFckUsZ0NBQWdDO2dCQUNoQ1QsSUFBSVUsU0FBUyxHQUFHSDtnQkFDaEJQLElBQUlXLFFBQVEsQ0FBQyxHQUFHLEdBQUdkLE9BQU9RLEtBQUssRUFBRVIsT0FBT1MsTUFBTTtZQUNoRDtZQUVBLDhFQUE4RTtZQUM5RSxNQUFNTSxpQkFBaUJWLElBQUlHLEtBQUssR0FBR0gsSUFBSUksTUFBTTtZQUM3QyxNQUFNTyxvQkFBb0JyQixjQUFjQztZQUV4QyxJQUFJcUIsV0FBV0MsWUFBWUMsU0FBU0M7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VCtDLFVBQVM7d0JBQUc7Ozs7OztrQ0FFakMsOERBQUMwRTt3QkFBS1IsV0FBVTs7NEJBQ2IxQyxLQUFLbUQsR0FBRyxDQUFDM0UsVUFBVTs0QkFBRzs0QkFBSXdCLEtBQUtDLEtBQUssQ0FBQyxXQUFZLE1BQU92Qjs0QkFBWTs0QkFBRUE7NEJBQVc7Ozs7Ozs7Ozs7Ozs7WUFJdkZFLFlBQVliLE1BQU0sR0FBRyxtQkFDcEIsOERBQUMwRTtnQkFBSUMsV0FBVTs7a0NBQ2IsOERBQUNEO2tDQUFJOzs7Ozs7a0NBQ0wsOERBQUNXO3dCQUFHVixXQUFVO2tDQUNYOUQsWUFBWTJELEdBQUcsQ0FBQyxRQUFrQmhEO2dDQUFqQixFQUFFNUUsSUFBSSxFQUFFdUQsS0FBSyxFQUFFO2lEQUMvQiw4REFBQ21GOztvQ0FBYzFJLEtBQUtpQyxJQUFJO29DQUFDO29DQUFHc0I7OytCQUFuQnFCOzs7Ozs7Ozs7OztrQ0FHYiw4REFBQytEO3dCQUNDWixXQUFVO3dCQUNWYSxTQUFTbEI7d0JBQ1RXLFVBQVVsRTtrQ0FFVEEsV0FBVyxnQkFBZ0I7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQU14QztHQXZNd0JYO0tBQUFBIiwic291cmNlcyI6WyIvVm9sdW1lcy9TaWxiZXJBcnJvd3MvQ09ERUJBU0Uvc2lsYmVyYXJyb3dzX3V2L2NvbXBvbmVudHMvbW9kdWxlcy91di1jcm0vY29tcG9uZW50cy9NZWRpYVVwbG9hZGVyLnRzeCJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyB1c2VTdGF0ZSB9IGZyb20gJ3JlYWN0JztcbmltcG9ydCB7IHN1cGFiYXNlIH0gZnJvbSAnQC9saWIvc3VwYWJhc2VDbGllbnQnO1xuXG5pbnRlcmZhY2UgUHJvcHMge1xuICBjYXJJZDogc3RyaW5nO1xuICBvblVwbG9hZGVkPzogKCkgPT4gdm9pZDtcbn1cblxuLy8gRnVuY3Rpb24gdG8gY29udmVydCBpbWFnZSB0byBzcGVjaWZpYyByYXRpbyB3aGlsZSBtYWludGFpbmluZyB0cmFuc3BhcmVuY3lcbmNvbnN0IHByb2Nlc3NJbWFnZVRvUmF0aW8gPSBhc3luYyAoZmlsZTogRmlsZSwgdGFyZ2V0V2lkdGg6IG51bWJlciwgdGFyZ2V0SGVpZ2h0OiBudW1iZXIsIGFkZEJhY2tncm91bmQ6IGJvb2xlYW4gPSBmYWxzZSk6IFByb21pc2U8RmlsZT4gPT4ge1xuICByZXR1cm4gbmV3IFByb21pc2UoKHJlc29sdmUpID0+IHtcbiAgICBjb25zdCBjYW52YXMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdjYW52YXMnKTtcbiAgICBjb25zdCBjdHggPSBjYW52YXMuZ2V0Q29udGV4dCgnMmQnKTtcbiAgICBjb25zdCBpbWcgPSBuZXcgSW1hZ2UoKTtcbiAgICBcbiAgICBpbWcub25sb2FkID0gKCkgPT4ge1xuICAgICAgY2FudmFzLndpZHRoID0gdGFyZ2V0V2lkdGg7XG4gICAgICBjYW52YXMuaGVpZ2h0ID0gdGFyZ2V0SGVpZ2h0O1xuICAgICAgXG4gICAgICBpZiAoIWN0eCkge1xuICAgICAgICByZXNvbHZlKGZpbGUpOyAvLyBmYWxsYmFjayB0byBvcmlnaW5hbCBpZiBjYW52YXMgY29udGV4dCBmYWlsc1xuICAgICAgICByZXR1cm47XG4gICAgICB9XG4gICAgICBcbiAgICAgIC8vIEFkZCBiYWNrZ3JvdW5kIG9ubHkgaWYgcmVxdWVzdGVkIChmb3IgbWFpbiB2ZXJzaW9uKVxuICAgICAgaWYgKGFkZEJhY2tncm91bmQpIHtcbiAgICAgICAgLy8gQ3JlYXRlIGxpZ2h0IGdyZXkgZ3JhZGllbnQgYmFja2dyb3VuZFxuICAgICAgICBjb25zdCBncmFkaWVudCA9IGN0eC5jcmVhdGVMaW5lYXJHcmFkaWVudCgwLCAwLCAwLCBjYW52YXMuaGVpZ2h0KTtcbiAgICAgICAgZ3JhZGllbnQuYWRkQ29sb3JTdG9wKDAsICcjZjhmOGY4Jyk7ICAvLyBWZXJ5IGxpZ2h0IGdyZXkgYXQgdG9wXG4gICAgICAgIGdyYWRpZW50LmFkZENvbG9yU3RvcCgwLjUsICcjZThlOGU4Jyk7IC8vIExpZ2h0IGdyZXkgaW4gbWlkZGxlXG4gICAgICAgIGdyYWRpZW50LmFkZENvbG9yU3RvcCgxLCAnI2Q4ZDhkOCcpOyAgIC8vIE1lZGl1bSBsaWdodCBncmV5IGF0IGJvdHRvbVxuICAgICAgICBcbiAgICAgICAgLy8gRmlsbCBiYWNrZ3JvdW5kIHdpdGggZ3JhZGllbnRcbiAgICAgICAgY3R4LmZpbGxTdHlsZSA9IGdyYWRpZW50O1xuICAgICAgICBjdHguZmlsbFJlY3QoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcbiAgICAgIH1cbiAgICAgIFxuICAgICAgLy8gQ2FsY3VsYXRlIHNjYWxpbmcgdG8gZml0IGltYWdlIHdpdGhpbiBjYW52YXMgd2hpbGUgbWFpbnRhaW5pbmcgYXNwZWN0IHJhdGlvXG4gICAgICBjb25zdCBpbWdBc3BlY3RSYXRpbyA9IGltZy53aWR0aCAvIGltZy5oZWlnaHQ7XG4gICAgICBjb25zdCBjYW52YXNBc3BlY3RSYXRpbyA9IHRhcmdldFdpZHRoIC8gdGFyZ2V0SGVpZ2h0O1xuICAgICAgXG4gICAgICBsZXQgZHJhd1dpZHRoLCBkcmF3SGVpZ2h0LCBvZmZzZXRYLCBvZmZzZXRZO1xuICAgICAgXG4gICAgICBpZiAoaW1nQXNwZWN0UmF0aW8gPiBjYW52YXNBc3BlY3RSYXRpbykge1xuICAgICAgICAvLyBJbWFnZSBpcyB3aWRlciAtIGZpdCB0byB3aWR0aFxuICAgICAgICBkcmF3V2lkdGggPSB0YXJnZXRXaWR0aDtcbiAgICAgICAgZHJhd0hlaWdodCA9IHRhcmdldFdpZHRoIC8gaW1nQXNwZWN0UmF0aW87XG4gICAgICAgIG9mZnNldFggPSAwO1xuICAgICAgICBvZmZzZXRZID0gKHRhcmdldEhlaWdodCAtIGRyYXdIZWlnaHQpIC8gMjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEltYWdlIGlzIHRhbGxlciAtIGZpdCB0byBoZWlnaHRcbiAgICAgICAgZHJhd1dpZHRoID0gdGFyZ2V0SGVpZ2h0ICogaW1nQXNwZWN0UmF0aW87XG4gICAgICAgIGRyYXdIZWlnaHQgPSB0YXJnZXRIZWlnaHQ7XG4gICAgICAgIG9mZnNldFggPSAodGFyZ2V0V2lkdGggLSBkcmF3V2lkdGgpIC8gMjtcbiAgICAgICAgb2Zmc2V0WSA9IDA7XG4gICAgICB9XG4gICAgICBcbiAgICAgIC8vIERyYXcgdGhlIGltYWdlIGNlbnRlcmVkIG9uIHRoZSBjYW52YXNcbiAgICAgIGN0eC5kcmF3SW1hZ2UoaW1nLCBvZmZzZXRYLCBvZmZzZXRZLCBkcmF3V2lkdGgsIGRyYXdIZWlnaHQpO1xuICAgICAgXG4gICAgICAvLyBDb252ZXJ0IGNhbnZhcyB0byBmaWxlXG4gICAgICBjYW52YXMudG9CbG9iKChibG9iKSA9PiB7XG4gICAgICAgIGlmIChibG9iKSB7XG4gICAgICAgICAgY29uc3Qgc3VmZml4ID0gYWRkQmFja2dyb3VuZCA/ICdfd2l0aF9iZycgOiAodGFyZ2V0V2lkdGggPT09IHRhcmdldEhlaWdodCA/ICdfc3F1YXJlJyA6ICdfNHg1Jyk7XG4gICAgICAgICAgY29uc3QgbmV3RmlsZSA9IG5ldyBGaWxlKFtibG9iXSwgZmlsZS5uYW1lLnJlcGxhY2UoL1xcLnBuZyQvaSwgYCR7c3VmZml4fS5wbmdgKSwge1xuICAgICAgICAgICAgdHlwZTogJ2ltYWdlL3BuZycsXG4gICAgICAgICAgICBsYXN0TW9kaWZpZWQ6IERhdGUubm93KClcbiAgICAgICAgICB9KTtcbiAgICAgICAgICByZXNvbHZlKG5ld0ZpbGUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHJlc29sdmUoZmlsZSk7IC8vIGZhbGxiYWNrIHRvIG9yaWdpbmFsXG4gICAgICAgIH1cbiAgICAgIH0sICdpbWFnZS9wbmcnLCAwLjk1KTtcbiAgICB9O1xuICAgIFxuICAgIGltZy5vbmVycm9yID0gKCkgPT4ge1xuICAgICAgcmVzb2x2ZShmaWxlKTsgLy8gZmFsbGJhY2sgdG8gb3JpZ2luYWwgaWYgaW1hZ2UgbG9hZGluZyBmYWlsc1xuICAgIH07XG4gICAgXG4gICAgaW1nLnNyYyA9IFVSTC5jcmVhdGVPYmplY3RVUkwoZmlsZSk7XG4gIH0pO1xufTtcblxuLy8gRnVuY3Rpb24gdG8gY2hlY2sgaWYgUE5HIGhhcyB0cmFuc3BhcmVuY3lcbmNvbnN0IGhhc1BuZ1RyYW5zcGFyZW5jeSA9IGFzeW5jIChmaWxlOiBGaWxlKTogUHJvbWlzZTxib29sZWFuPiA9PiB7XG4gIGlmICghZmlsZS50eXBlLmluY2x1ZGVzKCdwbmcnKSkge1xuICAgIGNvbnNvbGUubG9nKGBGaWxlICR7ZmlsZS5uYW1lfSBpcyBub3QgUE5HLCBza2lwcGluZyB0cmFuc3BhcmVuY3kgY2hlY2tgKTtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cbiAgXG4gIHJldHVybiBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT4ge1xuICAgIGNvbnN0IGNhbnZhcyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2NhbnZhcycpO1xuICAgIGNvbnN0IGN0eCA9IGNhbnZhcy5nZXRDb250ZXh0KCcyZCcpO1xuICAgIGNvbnN0IGltZyA9IG5ldyBJbWFnZSgpO1xuICAgIFxuICAgIGltZy5vbmxvYWQgPSAoKSA9PiB7XG4gICAgICBjYW52YXMud2lkdGggPSBpbWcud2lkdGg7XG4gICAgICBjYW52YXMuaGVpZ2h0ID0gaW1nLmhlaWdodDtcbiAgICAgIFxuICAgICAgaWYgKCFjdHgpIHtcbiAgICAgICAgY29uc29sZS5sb2coYEZhaWxlZCB0byBnZXQgY2FudmFzIGNvbnRleHQgZm9yICR7ZmlsZS5uYW1lfWApO1xuICAgICAgICByZXNvbHZlKGZhbHNlKTtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuICAgICAgXG4gICAgICBjdHguZHJhd0ltYWdlKGltZywgMCwgMCk7XG4gICAgICBcbiAgICAgIHRyeSB7XG4gICAgICAgIGNvbnN0IGltYWdlRGF0YSA9IGN0eC5nZXRJbWFnZURhdGEoMCwgMCwgY2FudmFzLndpZHRoLCBjYW52YXMuaGVpZ2h0KTtcbiAgICAgICAgY29uc3QgZGF0YSA9IGltYWdlRGF0YS5kYXRhO1xuICAgICAgICBcbiAgICAgICAgbGV0IHRyYW5zcGFyZW50UGl4ZWxzID0gMDtcbiAgICAgICAgbGV0IHRvdGFsUGl4ZWxzID0gZGF0YS5sZW5ndGggLyA0O1xuICAgICAgICBcbiAgICAgICAgLy8gQ2hlY2sgZm9yIGFueSBwaXhlbHMgd2l0aCBhbHBoYSA8IDI1NSAodHJhbnNwYXJlbmN5KVxuICAgICAgICBmb3IgKGxldCBpID0gMzsgaSA8IGRhdGEubGVuZ3RoOyBpICs9IDQpIHtcbiAgICAgICAgICBpZiAoZGF0YVtpXSA8IDI1NSkge1xuICAgICAgICAgICAgdHJhbnNwYXJlbnRQaXhlbHMrKztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgXG4gICAgICAgIGNvbnN0IGhhc1RyYW5zcGFyZW5jeSA9IHRyYW5zcGFyZW50UGl4ZWxzID4gMDtcbiAgICAgICAgY29uc29sZS5sb2coYFRyYW5zcGFyZW5jeSBhbmFseXNpcyBmb3IgJHtmaWxlLm5hbWV9OiAke3RyYW5zcGFyZW50UGl4ZWxzfS8ke3RvdGFsUGl4ZWxzfSB0cmFuc3BhcmVudCBwaXhlbHMsIHJlc3VsdDogJHtoYXNUcmFuc3BhcmVuY3l9YCk7XG4gICAgICAgIHJlc29sdmUoaGFzVHJhbnNwYXJlbmN5KTtcbiAgICAgICAgXG4gICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICBjb25zb2xlLmxvZyhgRXJyb3IgY2hlY2tpbmcgdHJhbnNwYXJlbmN5IGZvciAke2ZpbGUubmFtZX06YCwgZXJyb3IpO1xuICAgICAgICAvLyBJZiB3ZSBjYW4ndCBhY2Nlc3MgaW1hZ2UgZGF0YSAoQ09SUywgZXRjLiksIGFzc3VtZSBpdCBoYXMgdHJhbnNwYXJlbmN5IHRvIGJlIHNhZmVcbiAgICAgICAgY29uc29sZS5sb2coYEFzc3VtaW5nIHRyYW5zcGFyZW5jeSBmb3IgJHtmaWxlLm5hbWV9IGR1ZSB0byBhY2Nlc3MgZXJyb3JgKTtcbiAgICAgICAgcmVzb2x2ZSh0cnVlKTtcbiAgICAgIH1cbiAgICB9O1xuICAgIFxuICAgIGltZy5vbmVycm9yID0gKGVycm9yKSA9PiB7XG4gICAgICBjb25zb2xlLmxvZyhgRXJyb3IgbG9hZGluZyBpbWFnZSAke2ZpbGUubmFtZX0gZm9yIHRyYW5zcGFyZW5jeSBjaGVjazpgLCBlcnJvcik7XG4gICAgICByZXNvbHZlKGZhbHNlKTtcbiAgICB9O1xuICAgIFxuICAgIGltZy5zcmMgPSBVUkwuY3JlYXRlT2JqZWN0VVJMKGZpbGUpO1xuICB9KTtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIE1lZGlhVXBsb2FkZXIoeyBjYXJJZCwgb25VcGxvYWRlZCB9OiBQcm9wcykge1xuICBjb25zdCBbdXBsb2FkaW5nLCBzZXRVcGxvYWRpbmddID0gdXNlU3RhdGUoZmFsc2UpO1xuICBjb25zdCBbcHJvZ3Jlc3MsIHNldFByb2dyZXNzXSA9IHVzZVN0YXRlKDApO1xuICBjb25zdCBbdG90YWxGaWxlcywgc2V0VG90YWxGaWxlc10gPSB1c2VTdGF0ZSgwKTtcbiAgY29uc3QgW2ZhaWxlZEZpbGVzLCBzZXRGYWlsZWRGaWxlc10gPSB1c2VTdGF0ZTx7IGZpbGU6IEZpbGUsIGVycm9yOiBzdHJpbmcgfVtdPihbXSk7XG4gIGNvbnN0IFtyZXRyeWluZywgc2V0UmV0cnlpbmddID0gdXNlU3RhdGUoZmFsc2UpO1xuXG4gIGNvbnN0IGhhbmRsZUZpbGVzID0gYXN5bmMgKGU6IFJlYWN0LkNoYW5nZUV2ZW50PEhUTUxJbnB1dEVsZW1lbnQ+KSA9PiB7XG4gICAgY29uc3QgZmlsZXMgPSBBcnJheS5mcm9tKGUudGFyZ2V0LmZpbGVzIHx8IFtdKTtcbiAgICBpZiAoIWZpbGVzLmxlbmd0aCkgcmV0dXJuO1xuICAgIHNldFVwbG9hZGluZyh0cnVlKTtcbiAgICBzZXRUb3RhbEZpbGVzKGZpbGVzLmxlbmd0aCk7XG4gICAgc2V0UHJvZ3Jlc3MoMCk7XG4gICAgc2V0RmFpbGVkRmlsZXMoW10pO1xuXG4gICAgbGV0IGZhaWxlZDogeyBmaWxlOiBGaWxlLCBlcnJvcjogc3RyaW5nIH1bXSA9IFtdO1xuXG4gICAgZm9yIChsZXQgaWR4ID0gMDsgaWR4IDwgZmlsZXMubGVuZ3RoOyBpZHgrKykge1xuICAgICAgY29uc3QgZmlsZSA9IGZpbGVzW2lkeF07XG4gICAgICBcbiAgICAgIGlmIChmaWxlLnR5cGUuc3RhcnRzV2l0aCgnaW1hZ2UnKSkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIC8vIENoZWNrIGlmIFBORyBoYXMgdHJhbnNwYXJlbmN5IGFuZCBwcm9jZXNzIGFjY29yZGluZ2x5XG4gICAgICAgICAgaWYgKGZpbGUudHlwZS5pbmNsdWRlcygncG5nJykpIHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBQTkcgZmlsZSBkZXRlY3RlZDogJHtmaWxlLm5hbWV9LCBjaGVja2luZyB0cmFuc3BhcmVuY3kuLi5gKTtcbiAgICAgICAgICAgIGNvbnN0IGhhc1RyYW5zcGFyZW5jeSA9IGF3YWl0IGhhc1BuZ1RyYW5zcGFyZW5jeShmaWxlKTtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBUcmFuc3BhcmVuY3kgY2hlY2sgcmVzdWx0IGZvciAke2ZpbGUubmFtZX06ICR7aGFzVHJhbnNwYXJlbmN5fWApO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoaGFzVHJhbnNwYXJlbmN5KSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBQcm9jZXNzaW5nIHRyYW5zcGFyZW50IFBORzogJHtmaWxlLm5hbWV9IGludG8gMyB2ZXJzaW9uc2ApO1xuICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgLy8gQ3JlYXRlIDMgdmVyc2lvbnMgZm9yIHRyYW5zcGFyZW50IFBOR3NcbiAgICAgICAgICAgICAgY29uc3QgdmVyc2lvbnMgPSBbXG4gICAgICAgICAgICAgICAgeyBcbiAgICAgICAgICAgICAgICAgIGZpbGU6IGF3YWl0IHByb2Nlc3NJbWFnZVRvUmF0aW8oZmlsZSwgMTYwMCwgMTIwMCwgdHJ1ZSksIC8vIE1haW4gd2l0aCBiYWNrZ3JvdW5kXG4gICAgICAgICAgICAgICAgICBraW5kOiAncGhvdG8nLFxuICAgICAgICAgICAgICAgICAgbmFtZTogJ01haW4gKHdpdGggYmFja2dyb3VuZCknLFxuICAgICAgICAgICAgICAgICAgbWV0YWRhdGE6ICdtYWluJ1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgeyBcbiAgICAgICAgICAgICAgICAgIGZpbGU6IGF3YWl0IHByb2Nlc3NJbWFnZVRvUmF0aW8oZmlsZSwgMTA4MCwgMTM1MCwgZmFsc2UpLCAvLyA0OjUgdHJhbnNwYXJlbnRcbiAgICAgICAgICAgICAgICAgIGtpbmQ6ICdwaG90bycsIFxuICAgICAgICAgICAgICAgICAgbmFtZTogJzQ6NSBSYXRpbyAodHJhbnNwYXJlbnQpJyxcbiAgICAgICAgICAgICAgICAgIG1ldGFkYXRhOiAnNHg1J1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgeyBcbiAgICAgICAgICAgICAgICAgIGZpbGU6IGF3YWl0IHByb2Nlc3NJbWFnZVRvUmF0aW8oZmlsZSwgMTA4MCwgMTA4MCwgZmFsc2UpLCAvLyAxOjEgdHJhbnNwYXJlbnRcbiAgICAgICAgICAgICAgICAgIGtpbmQ6ICdwaG90bycsXG4gICAgICAgICAgICAgICAgICBuYW1lOiAnU3F1YXJlICh0cmFuc3BhcmVudCknLFxuICAgICAgICAgICAgICAgICAgbWV0YWRhdGE6ICdzcXVhcmUnXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICBdO1xuICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgY29uc29sZS5sb2coYENyZWF0ZWQgJHt2ZXJzaW9ucy5sZW5ndGh9IHZlcnNpb25zIGZvciAke2ZpbGUubmFtZX1gKTtcbiAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgIC8vIFVwbG9hZCBhbGwgMyB2ZXJzaW9uc1xuICAgICAgICAgICAgICBmb3IgKGNvbnN0IHZlcnNpb24gb2YgdmVyc2lvbnMpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhgVXBsb2FkaW5nICR7dmVyc2lvbi5uYW1lfSBhcyAke3ZlcnNpb24ua2luZH1gKTtcbiAgICAgICAgICAgICAgICBhd2FpdCB1cGxvYWRTaW5nbGVWZXJzaW9uKHZlcnNpb24uZmlsZSwgdmVyc2lvbi5raW5kLCBmaWxlLCBpZHgsIGZhaWxlZCk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBOb24tdHJhbnNwYXJlbnQgUE5HOiAke2ZpbGUubmFtZX0sIHVwbG9hZGluZyBvcmlnaW5hbCBvbmx5YCk7XG4gICAgICAgICAgICAgIC8vIE5vbi10cmFuc3BhcmVudCBQTkcgLSBqdXN0IHVwbG9hZCBvcmlnaW5hbFxuICAgICAgICAgICAgICBhd2FpdCB1cGxvYWRTaW5nbGVWZXJzaW9uKGZpbGUsICdwaG90bycsIGZpbGUsIGlkeCwgZmFpbGVkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc29sZS5sb2coYE5vbi1QTkcgaW1hZ2U6ICR7ZmlsZS5uYW1lfSwgdXBsb2FkaW5nIG9yaWdpbmFsIG9ubHlgKTtcbiAgICAgICAgICAgIC8vIE5vbi1QTkcgaW1hZ2UgLSBqdXN0IHVwbG9hZCBvcmlnaW5hbFxuICAgICAgICAgICAgYXdhaXQgdXBsb2FkU2luZ2xlVmVyc2lvbihmaWxlLCAncGhvdG8nLCBmaWxlLCBpZHgsIGZhaWxlZCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIFxuICAgICAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgICAgICBjb25zb2xlLndhcm4oJ0ltYWdlIHByb2Nlc3NpbmcgZmFpbGVkLCB1cGxvYWRpbmcgb3JpZ2luYWwnLCBlcnIpO1xuICAgICAgICAgIGF3YWl0IHVwbG9hZFNpbmdsZVZlcnNpb24oZmlsZSwgJ3Bob3RvJywgZmlsZSwgaWR4LCBmYWlsZWQpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBOb24taW1hZ2UgZmlsZSAodmlkZW8sIGV0Yy4pXG4gICAgICAgIGF3YWl0IHVwbG9hZFNpbmdsZVZlcnNpb24oZmlsZSwgZmlsZS50eXBlLnN0YXJ0c1dpdGgoJ3ZpZGVvJykgPyAndmlkZW8nIDogJ2RvY3VtZW50JywgZmlsZSwgaWR4LCBmYWlsZWQpO1xuICAgICAgfVxuXG4gICAgICBzZXRQcm9ncmVzcyhNYXRoLnJvdW5kKCgoaWR4ICsgMSkgLyBmaWxlcy5sZW5ndGgpICogMTAwKSk7XG4gICAgfVxuXG4gICAgc2V0UHJvZ3Jlc3MoMTAwKTtcbiAgICBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgIHNldFVwbG9hZGluZyhmYWxzZSk7XG4gICAgICBzZXRQcm9ncmVzcygwKTtcbiAgICAgIHNldFRvdGFsRmlsZXMoMCk7XG4gICAgICBpZiAob25VcGxvYWRlZCkgb25VcGxvYWRlZCgpO1xuICAgIH0sIDgwMCk7XG4gICAgZS50YXJnZXQudmFsdWUgPSAnJztcbiAgfTtcblxuICAvLyBIZWxwZXIgZnVuY3Rpb24gdG8gdXBsb2FkIGEgc2luZ2xlIHZlcnNpb25cbiAgY29uc3QgdXBsb2FkU2luZ2xlVmVyc2lvbiA9IGFzeW5jICh1cGxvYWRGaWxlOiBGaWxlIHwgQmxvYiwga2luZDogc3RyaW5nLCBvcmlnaW5hbEZpbGU6IEZpbGUsIGlkeDogbnVtYmVyLCBmYWlsZWRBcnJheTogeyBmaWxlOiBGaWxlLCBlcnJvcjogc3RyaW5nIH1bXSkgPT4ge1xuICAgIGNvbnNvbGUubG9nKGBTdGFydGluZyB1cGxvYWQ6IGtpbmQ9JHtraW5kfSwgb3JpZ2luYWxGaWxlPSR7b3JpZ2luYWxGaWxlLm5hbWV9LCB1cGxvYWRGaWxlIHNpemU9JHt1cGxvYWRGaWxlLnNpemV9YCk7XG4gICAgXG4gICAgY29uc3QgZXh0ID0gb3JpZ2luYWxGaWxlLm5hbWUuc3BsaXQoJy4nKS5wb3AoKTtcbiAgICBjb25zdCBwYXRoID0gYCR7Y2FySWR9LyR7Y3J5cHRvLnJhbmRvbVVVSUQoKX0uJHtleHR9YDtcblxuICAgIC8vIENoZWNrIGlmIGNhciBhbHJlYWR5IGhhcyBtZWRpYVxuICAgIGNvbnN0IHsgY291bnQ6IHBob3RvQ291bnQgfSA9IGF3YWl0IHN1cGFiYXNlXG4gICAgICAuZnJvbSgnY2FyX21lZGlhJylcbiAgICAgIC5zZWxlY3QoJyonLCB7IGhlYWQ6IHRydWUsIGNvdW50OiAnZXhhY3QnIH0pXG4gICAgICAuZXEoJ2Nhcl9pZCcsIGNhcklkKVxuICAgICAgLmVxKCdraW5kJywgJ3Bob3RvJyk7IC8vIE9ubHkgY291bnQgbWFpbiBwaG90b3MgZm9yIHByaW1hcnkgZGV0ZXJtaW5hdGlvblxuICAgIGNvbnN0IGlzRmlyc3RQaG90byA9IGtpbmQgPT09ICdwaG90bycgJiYgKCFwaG90b0NvdW50IHx8IHBob3RvQ291bnQgPT09IDApO1xuXG4gICAgY29uc29sZS5sb2coYFVwbG9hZCBkZXRhaWxzOiBwYXRoPSR7cGF0aH0sIGtpbmQ9JHtraW5kfSwgaXNGaXJzdFBob3RvPSR7aXNGaXJzdFBob3RvfWApO1xuXG4gICAgLy8gVXBsb2FkIHRvIFN0b3JhZ2UgYnVja2V0ICdjYXItbWVkaWEnXG4gICAgY29uc3QgeyBlcnJvcjogdXBFcnIgfSA9IGF3YWl0IHN1cGFiYXNlLnN0b3JhZ2VcbiAgICAgIC5mcm9tKCdjYXItbWVkaWEnKVxuICAgICAgLnVwbG9hZChwYXRoLCB1cGxvYWRGaWxlLCB7XG4gICAgICAgIGNvbnRlbnRUeXBlOiB1cGxvYWRGaWxlLnR5cGUgfHwgb3JpZ2luYWxGaWxlLnR5cGUsXG4gICAgICAgIGNhY2hlQ29udHJvbDogJzM2MDAnLFxuICAgICAgICB1cHNlcnQ6IGZhbHNlLFxuICAgICAgfSk7XG4gICAgXG4gICAgaWYgKHVwRXJyKSB7XG4gICAgICBjb25zb2xlLmxvZyhgVXBsb2FkIGZhaWxlZCBmb3IgJHtraW5kfTpgLCB1cEVyci5tZXNzYWdlKTtcbiAgICAgIGZhaWxlZEFycmF5LnB1c2goeyBmaWxlOiBvcmlnaW5hbEZpbGUsIGVycm9yOiB1cEVyci5tZXNzYWdlIH0pO1xuICAgICAgc2V0RmFpbGVkRmlsZXMoWy4uLmZhaWxlZEFycmF5XSk7XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc29sZS5sb2coYFN0b3JhZ2UgdXBsb2FkIHN1Y2Nlc3NmdWwgZm9yICR7a2luZH1gKTtcblxuICAgIC8vIEdldCBwZXJtYW5lbnQgcHVibGljIFVSTFxuICAgIGNvbnN0IHsgZGF0YTogcHViIH0gPSBzdXBhYmFzZS5zdG9yYWdlLmZyb20oJ2Nhci1tZWRpYScpLmdldFB1YmxpY1VybChwYXRoKTtcbiAgICBjb25zdCB1cmwgPSBwdWIucHVibGljVXJsO1xuXG4gICAgLy8gU3RvcmUgdGhlIHB1YmxpYyBVUkwgaW4gREIgd2l0aCBwcm9wZXIga2luZCBhbmQgc29ydF9vcmRlclxuICAgIGNvbnN0IHsgZXJyb3I6IGRiRXJyb3IgfSA9IGF3YWl0IHN1cGFiYXNlLmZyb20oJ2Nhcl9tZWRpYScpLmluc2VydCh7XG4gICAgICBjYXJfaWQ6IGNhcklkLFxuICAgICAga2luZDoga2luZCxcbiAgICAgIHVybCxcbiAgICAgIGlzX3ByaW1hcnk6IGlzRmlyc3RQaG90byxcbiAgICAgIHNvcnRfb3JkZXI6IGlkeCxcbiAgICB9KTtcblxuICAgIGlmIChkYkVycm9yKSB7XG4gICAgICBjb25zb2xlLmxvZyhgRGF0YWJhc2UgaW5zZXJ0IGZhaWxlZCBmb3IgJHtraW5kfTpgLCBkYkVycm9yKTtcbiAgICB9IGVsc2Uge1xuICAgICAgY29uc29sZS5sb2coYFN1Y2Nlc3NmdWxseSBzYXZlZCAke2tpbmR9IHRvIGRhdGFiYXNlOiAke3VybH1gKTtcbiAgICB9XG4gIH07XG5cbiAgY29uc3QgcmV0cnlGYWlsZWQgPSBhc3luYyAoKSA9PiB7XG4gICAgaWYgKCFmYWlsZWRGaWxlcy5sZW5ndGgpIHJldHVybjtcbiAgICBzZXRSZXRyeWluZyh0cnVlKTtcbiAgICAvLyBSZXRyeSBvbmx5IGZhaWxlZCBmaWxlc1xuICAgIGNvbnN0IGZpbGVzVG9SZXRyeSA9IGZhaWxlZEZpbGVzLm1hcChmID0+IGYuZmlsZSk7XG4gICAgc2V0RmFpbGVkRmlsZXMoW10pO1xuICAgIGF3YWl0IGhhbmRsZUZpbGVzKHsgdGFyZ2V0OiB7IGZpbGVzOiBmaWxlc1RvUmV0cnkgfSB9IGFzIGFueSk7XG4gICAgc2V0UmV0cnlpbmcoZmFsc2UpO1xuICB9O1xuXG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9XCJzcGFjZS15LTFcIj5cbiAgICAgIDxsYWJlbCBjbGFzc05hbWU9XCJibG9jayB0ZXh0LXdoaXRlLzcwIHRleHQteHNcIj5VcGxvYWQgUGhvdG9zIC8gVmlkZW9zPC9sYWJlbD5cbiAgICAgIDxpbnB1dFxuICAgICAgICB0eXBlPVwiZmlsZVwiXG4gICAgICAgIG11bHRpcGxlXG4gICAgICAgIGFjY2VwdD1cImltYWdlLyosdmlkZW8vKlwiXG4gICAgICAgIG9uQ2hhbmdlPXtoYW5kbGVGaWxlc31cbiAgICAgICAgZGlzYWJsZWQ9e3VwbG9hZGluZyB8fCByZXRyeWluZ31cbiAgICAgICAgY2xhc3NOYW1lPVwidGV4dC13aGl0ZSB0ZXh0LXhzXCJcbiAgICAgIC8+XG4gICAgICB7dXBsb2FkaW5nICYmIChcbiAgICAgICAgPGRpdiBjbGFzc05hbWU9XCJ3LWZ1bGwgYmctZ3JheS03MDAvNTAgaC0zIHJvdW5kZWQgb3ZlcmZsb3ctaGlkZGVuIHJlbGF0aXZlXCI+XG4gICAgICAgICAgPGRpdlxuICAgICAgICAgICAgY2xhc3NOYW1lPVwiYmctcmVkLTUwMCBoLTMgdHJhbnNpdGlvbi1hbGxcIlxuICAgICAgICAgICAgc3R5bGU9e3sgd2lkdGg6IGAke3Byb2dyZXNzfSVgIH19XG4gICAgICAgICAgLz5cbiAgICAgICAgICA8c3BhbiBjbGFzc05hbWU9XCJhYnNvbHV0ZSBpbnNldC0wIHRleHQtWzEwcHhdIGZsZXggaXRlbXMtY2VudGVyIGp1c3RpZnktY2VudGVyIHRleHQtd2hpdGUvODBcIj5cbiAgICAgICAgICAgIHtNYXRoLm1heChwcm9ncmVzcywgMSl9JSAoe01hdGgucm91bmQoKHByb2dyZXNzIC8gMTAwKSAqIHRvdGFsRmlsZXMpfS97dG90YWxGaWxlc30pXG4gICAgICAgICAgPC9zcGFuPlxuICAgICAgICA8L2Rpdj5cbiAgICAgICl9XG4gICAgICB7ZmFpbGVkRmlsZXMubGVuZ3RoID4gMCAmJiAoXG4gICAgICAgIDxkaXYgY2xhc3NOYW1lPVwibXQtMiB0ZXh0LXhzIHRleHQtcmVkLTQwMFwiPlxuICAgICAgICAgIDxkaXY+RmFpbGVkIHRvIHVwbG9hZDo8L2Rpdj5cbiAgICAgICAgICA8dWwgY2xhc3NOYW1lPVwibGlzdC1kaXNjIG1sLTRcIj5cbiAgICAgICAgICAgIHtmYWlsZWRGaWxlcy5tYXAoKHsgZmlsZSwgZXJyb3IgfSwgaWR4KSA9PiAoXG4gICAgICAgICAgICAgIDxsaSBrZXk9e2lkeH0+e2ZpbGUubmFtZX06IHtlcnJvcn08L2xpPlxuICAgICAgICAgICAgKSl9XG4gICAgICAgICAgPC91bD5cbiAgICAgICAgICA8YnV0dG9uXG4gICAgICAgICAgICBjbGFzc05hbWU9XCJtdC0xIHB4LTIgcHktMSBiZy1yZWQtNjAwIHRleHQtd2hpdGUgcm91bmRlZCB0ZXh0LXhzIGhvdmVyOmJnLXJlZC03MDBcIlxuICAgICAgICAgICAgb25DbGljaz17cmV0cnlGYWlsZWR9XG4gICAgICAgICAgICBkaXNhYmxlZD17cmV0cnlpbmd9XG4gICAgICAgICAgPlxuICAgICAgICAgICAge3JldHJ5aW5nID8gJ1JldHJ5aW5nLi4uJyA6ICdSZXRyeSBGYWlsZWQgVXBsb2Fkcyd9XG4gICAgICAgICAgPC9idXR0b24+XG4gICAgICAgIDwvZGl2PlxuICAgICAgKX1cbiAgICA8L2Rpdj5cbiAgKTtcbn0gIl0sIm5hbWVzIjpbInVzZVN0YXRlIiwic3VwYWJhc2UiLCJwcm9jZXNzSW1hZ2VUb1JhdGlvIiwiZmlsZSIsInRhcmdldFdpZHRoIiwidGFyZ2V0SGVpZ2h0IiwiYWRkQmFja2dyb3VuZCIsIlByb21pc2UiLCJyZXNvbHZlIiwiY2FudmFzIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiY3R4IiwiZ2V0Q29udGV4dCIsImltZyIsIkltYWdlIiwib25sb2FkIiwid2lkdGgiLCJoZWlnaHQiLCJncmFkaWVudCIsImNyZWF0ZUxpbmVhckdyYWRpZW50IiwiYWRkQ29sb3JTdG9wIiwiZmlsbFN0eWxlIiwiZmlsbFJlY3QiLCJpbWdBc3BlY3RSYXRpbyIsImNhbnZhc0FzcGVjdFJhdGlvIiwiZHJhd1dpZHRoIiwiZHJhd0hlaWdodCIsIm9mZnNldFgiLCJvZmZzZXRZIiwiZHJhd0ltYWdlIiwidG9CbG9iIiwiYmxvYiIsInN1ZmZpeCIsIm5ld0ZpbGUiLCJGaWxlIiwibmFtZSIsInJlcGxhY2UiLCJ0eXBlIiwibGFzdE1vZGlmaWVkIiwiRGF0ZSIsIm5vdyIsIm9uZXJyb3IiLCJzcmMiLCJVUkwiLCJjcmVhdGVPYmplY3RVUkwiLCJoYXNQbmdUcmFuc3BhcmVuY3kiLCJpbmNsdWRlcyIsImNvbnNvbGUiLCJsb2ciLCJpbWFnZURhdGEiLCJnZXRJbWFnZURhdGEiLCJkYXRhIiwidHJhbnNwYXJlbnRQaXhlbHMiLCJ0b3RhbFBpeGVscyIsImxlbmd0aCIsImkiLCJoYXNUcmFuc3BhcmVuY3kiLCJlcnJvciIsIk1lZGlhVXBsb2FkZXIiLCJjYXJJZCIsIm9uVXBsb2FkZWQiLCJ1cGxvYWRpbmciLCJzZXRVcGxvYWRpbmciLCJwcm9ncmVzcyIsInNldFByb2dyZXNzIiwidG90YWxGaWxlcyIsInNldFRvdGFsRmlsZXMiLCJmYWlsZWRGaWxlcyIsInNldEZhaWxlZEZpbGVzIiwicmV0cnlpbmciLCJzZXRSZXRyeWluZyIsImhhbmRsZUZpbGVzIiwiZSIsImZpbGVzIiwiQXJyYXkiLCJmcm9tIiwidGFyZ2V0IiwiZmFpbGVkIiwiaWR4Iiwic3RhcnRzV2l0aCIsInZlcnNpb25zIiwia2luZCIsIm1ldGFkYXRhIiwidmVyc2lvbiIsInVwbG9hZFNpbmdsZVZlcnNpb24iLCJlcnIiLCJ3YXJuIiwiTWF0aCIsInJvdW5kIiwic2V0VGltZW91dCIsInZhbHVlIiwidXBsb2FkRmlsZSIsIm9yaWdpbmFsRmlsZSIsImZhaWxlZEFycmF5Iiwic2l6ZSIsImV4dCIsInNwbGl0IiwicG9wIiwicGF0aCIsImNyeXB0byIsInJhbmRvbVVVSUQiLCJjb3VudCIsInBob3RvQ291bnQiLCJzZWxlY3QiLCJoZWFkIiwiZXEiLCJpc0ZpcnN0UGhvdG8iLCJ1cEVyciIsInN0b3JhZ2UiLCJ1cGxvYWQiLCJjb250ZW50VHlwZSIsImNhY2hlQ29udHJvbCIsInVwc2VydCIsIm1lc3NhZ2UiLCJwdXNoIiwicHViIiwiZ2V0UHVibGljVXJsIiwidXJsIiwicHVibGljVXJsIiwiZGJFcnJvciIsImluc2VydCIsImNhcl9pZCIsImlzX3ByaW1hcnkiLCJzb3J0X29yZGVyIiwicmV0cnlGYWlsZWQiLCJmaWxlc1RvUmV0cnkiLCJtYXAiLCJmIiwiZGl2IiwiY2xhc3NOYW1lIiwibGFiZWwiLCJpbnB1dCIsIm11bHRpcGxlIiwiYWNjZXB0Iiwib25DaGFuZ2UiLCJkaXNhYmxlZCIsInN0eWxlIiwic3BhbiIsIm1heCIsInVsIiwibGkiLCJidXR0b24iLCJvbkNsaWNrIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./components/modules/uv-crm/components/MediaUploader.tsx\n"));

/***/ })

});