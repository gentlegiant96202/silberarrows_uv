"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/inventory/page",{

/***/ "(app-pages-browser)/./components/modules/uv-crm/components/MediaUploader.tsx":
/*!****************************************************************!*\
  !*** ./components/modules/uv-crm/components/MediaUploader.tsx ***!
  \****************************************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ MediaUploader)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_1__);\n/* harmony import */ var _lib_supabaseClient__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/lib/supabaseClient */ \"(app-pages-browser)/./lib/supabaseClient.ts\");\n\nvar _s = $RefreshSig$();\n\n\n// Function to convert image to specific ratio while maintaining transparency\nconst processImageToRatio = async function(file, targetWidth, targetHeight) {\n    let addBackground = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : false;\n    return new Promise((resolve)=>{\n        const canvas = document.createElement('canvas');\n        const ctx = canvas.getContext('2d');\n        const img = new Image();\n        img.onload = ()=>{\n            canvas.width = targetWidth;\n            canvas.height = targetHeight;\n            if (!ctx) {\n                resolve(file); // fallback to original if canvas context fails\n                return;\n            }\n            // Add background only if requested (for main version)\n            if (addBackground) {\n                // Create light grey gradient background\n                const gradient = ctx.createLinearGradient(0, 0, 0, canvas.height);\n                gradient.addColorStop(0, '#f8f8f8'); // Very light grey at top\n                gradient.addColorStop(0.5, '#e8e8e8'); // Light grey in middle\n                gradient.addColorStop(1, '#d8d8d8'); // Medium light grey at bottom\n                // Fill background with gradient\n                ctx.fillStyle = gradient;\n                ctx.fillRect(0, 0, canvas.width, canvas.height);\n            }\n            // Calculate scaling to fit image within canvas while maintaining aspect ratio\n            const imgAspectRatio = img.width / img.height;\n            const canvasAspectRatio = targetWidth / targetHeight;\n            let drawWidth, drawHeight, offsetX, offsetY;\n            if (imgAspectRatio > canvasAspectRatio) {\n                // Image is wider - fit to width\n                drawWidth = targetWidth;\n                drawHeight = targetWidth / imgAspectRatio;\n                offsetX = 0;\n                offsetY = (targetHeight - drawHeight) / 2;\n            } else {\n                // Image is taller - fit to height\n                drawWidth = targetHeight * imgAspectRatio;\n                drawHeight = targetHeight;\n                offsetX = (targetWidth - drawWidth) / 2;\n                offsetY = 0;\n            }\n            // Draw the image centered on the canvas\n            ctx.drawImage(img, offsetX, offsetY, drawWidth, drawHeight);\n            // Convert canvas to file\n            canvas.toBlob((blob)=>{\n                if (blob) {\n                    const suffix = addBackground ? '_with_bg' : targetWidth === targetHeight ? '_square' : '_4x5';\n                    const newFile = new File([\n                        blob\n                    ], file.name.replace(/\\.png$/i, \"\".concat(suffix, \".png\")), {\n                        type: 'image/png',\n                        lastModified: Date.now()\n                    });\n                    resolve(newFile);\n                } else {\n                    resolve(file); // fallback to original\n                }\n            }, 'image/png', 0.95);\n        };\n        img.onerror = ()=>{\n            resolve(file); // fallback to original if image loading fails\n        };\n        img.src = URL.createObjectURL(file);\n    });\n};\n// Function to check if PNG has transparency\nconst hasPngTransparency = async (file)=>{\n    if (!file.type.includes('png')) return false;\n    return new Promise((resolve)=>{\n        const canvas = document.createElement('canvas');\n        const ctx = canvas.getContext('2d');\n        const img = new Image();\n        img.onload = ()=>{\n            canvas.width = img.width;\n            canvas.height = img.height;\n            if (!ctx) {\n                resolve(false);\n                return;\n            }\n            ctx.drawImage(img, 0, 0);\n            try {\n                const imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);\n                const data = imageData.data;\n                // Check for any pixels with alpha < 255 (transparency)\n                for(let i = 3; i < data.length; i += 4){\n                    if (data[i] < 255) {\n                        resolve(true);\n                        return;\n                    }\n                }\n                resolve(false);\n            } catch (error) {\n                // If we can't access image data (CORS, etc.), assume no transparency\n                resolve(false);\n            }\n        };\n        img.onerror = ()=>resolve(false);\n        img.src = URL.createObjectURL(file);\n    });\n};\nfunction MediaUploader(param) {\n    let { carId, onUploaded } = param;\n    _s();\n    const [uploading, setUploading] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const [progress, setProgress] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0);\n    const [totalFiles, setTotalFiles] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(0);\n    const [failedFiles, setFailedFiles] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)([]);\n    const [retrying, setRetrying] = (0,react__WEBPACK_IMPORTED_MODULE_1__.useState)(false);\n    const handleFiles = async (e)=>{\n        const files = Array.from(e.target.files || []);\n        if (!files.length) return;\n        setUploading(true);\n        setTotalFiles(files.length);\n        setProgress(0);\n        setFailedFiles([]);\n        let failed = [];\n        for(let idx = 0; idx < files.length; idx++){\n            const file = files[idx];\n            if (file.type.startsWith('image')) {\n                try {\n                    // Check if PNG has transparency and process accordingly\n                    if (file.type.includes('png')) {\n                        console.log(\"PNG file detected: \".concat(file.name, \", checking transparency...\"));\n                        const hasTransparency = await hasPngTransparency(file);\n                        console.log(\"Transparency check result for \".concat(file.name, \": \").concat(hasTransparency));\n                        if (hasTransparency) {\n                            console.log(\"Processing transparent PNG: \".concat(file.name, \" into 3 versions\"));\n                            // Create 3 versions for transparent PNGs\n                            const versions = [\n                                {\n                                    file: await processImageToRatio(file, 1600, 1200, true),\n                                    kind: 'photo',\n                                    name: 'Main (with background)'\n                                },\n                                {\n                                    file: await processImageToRatio(file, 1080, 1350, false),\n                                    kind: 'photo_4x5',\n                                    name: '4:5 Ratio (transparent)'\n                                },\n                                {\n                                    file: await processImageToRatio(file, 1080, 1080, false),\n                                    kind: 'photo_square',\n                                    name: 'Square (transparent)'\n                                }\n                            ];\n                            console.log(\"Created \".concat(versions.length, \" versions for \").concat(file.name));\n                            // Upload all 3 versions\n                            for (const version of versions){\n                                console.log(\"Uploading \".concat(version.name, \" as \").concat(version.kind));\n                                await uploadSingleVersion(version.file, version.kind, file, idx, failed);\n                            }\n                        } else {\n                            console.log(\"Non-transparent PNG: \".concat(file.name, \", uploading original only\"));\n                            // Non-transparent PNG - just upload original\n                            await uploadSingleVersion(file, 'photo', file, idx, failed);\n                        }\n                    } else {\n                        console.log(\"Non-PNG image: \".concat(file.name, \", uploading original only\"));\n                        // Non-PNG image - just upload original\n                        await uploadSingleVersion(file, 'photo', file, idx, failed);\n                    }\n                } catch (err) {\n                    console.warn('Image processing failed, uploading original', err);\n                    await uploadSingleVersion(file, 'photo', file, idx, failed);\n                }\n            } else {\n                // Non-image file (video, etc.)\n                await uploadSingleVersion(file, file.type.startsWith('video') ? 'video' : 'document', file, idx, failed);\n            }\n            setProgress(Math.round((idx + 1) / files.length * 100));\n        }\n        setProgress(100);\n        setTimeout(()=>{\n            setUploading(false);\n            setProgress(0);\n            setTotalFiles(0);\n            if (onUploaded) onUploaded();\n        }, 800);\n        e.target.value = '';\n    };\n    // Helper function to upload a single version\n    const uploadSingleVersion = async (uploadFile, kind, originalFile, idx, failedArray)=>{\n        const ext = originalFile.name.split('.').pop();\n        const path = \"\".concat(carId, \"/\").concat(crypto.randomUUID(), \".\").concat(ext);\n        // Check if car already has media\n        const { count: photoCount } = await _lib_supabaseClient__WEBPACK_IMPORTED_MODULE_2__.supabase.from('car_media').select('*', {\n            head: true,\n            count: 'exact'\n        }).eq('car_id', carId).eq('kind', 'photo'); // Only count main photos for primary determination\n        const isFirstPhoto = kind === 'photo' && (!photoCount || photoCount === 0);\n        // Upload to Storage bucket 'car-media'\n        const { error: upErr } = await _lib_supabaseClient__WEBPACK_IMPORTED_MODULE_2__.supabase.storage.from('car-media').upload(path, uploadFile, {\n            contentType: uploadFile.type || originalFile.type,\n            cacheControl: '3600',\n            upsert: false\n        });\n        if (upErr) {\n            failedArray.push({\n                file: originalFile,\n                error: upErr.message\n            });\n            setFailedFiles([\n                ...failedArray\n            ]);\n            return;\n        }\n        // Get permanent public URL\n        const { data: pub } = _lib_supabaseClient__WEBPACK_IMPORTED_MODULE_2__.supabase.storage.from('car-media').getPublicUrl(path);\n        const url = pub.publicUrl;\n        // Store the public URL in DB with proper kind and sort_order\n        await _lib_supabaseClient__WEBPACK_IMPORTED_MODULE_2__.supabase.from('car_media').insert({\n            car_id: carId,\n            kind: kind,\n            url,\n            is_primary: isFirstPhoto,\n            sort_order: idx\n        });\n    };\n    const retryFailed = async ()=>{\n        if (!failedFiles.length) return;\n        setRetrying(true);\n        // Retry only failed files\n        const filesToRetry = failedFiles.map((f)=>f.file);\n        setFailedFiles([]);\n        await handleFiles({\n            target: {\n                files: filesToRetry\n            }\n        });\n        setRetrying(false);\n    };\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        className: \"space-y-1\",\n        children: [\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"label\", {\n                className: \"block text-white/70 text-xs\",\n                children: \"Upload Photos / Videos\"\n            }, void 0, false, {\n                fileName: \"/Volumes/SilberArrows/CODEBASE/silberarrows_uv/components/modules/uv-crm/components/MediaUploader.tsx\",\n                lineNumber: 271,\n                columnNumber: 7\n            }, this),\n            /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"input\", {\n                type: \"file\",\n                multiple: true,\n                accept: \"image/*,video/*\",\n                onChange: handleFiles,\n                disabled: uploading || retrying,\n                className: \"text-white text-xs\"\n            }, void 0, false, {\n                fileName: \"/Volumes/SilberArrows/CODEBASE/silberarrows_uv/components/modules/uv-crm/components/MediaUploader.tsx\",\n                lineNumber: 272,\n                columnNumber: 7\n            }, this),\n            uploading && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"w-full bg-gray-700/50 h-3 rounded overflow-hidden relative\",\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        className: \"bg-red-500 h-3 transition-all\",\n                        style: {\n                            width: \"\".concat(progress, \"%\")\n                        }\n                    }, void 0, false, {\n                        fileName: \"/Volumes/SilberArrows/CODEBASE/silberarrows_uv/components/modules/uv-crm/components/MediaUploader.tsx\",\n                        lineNumber: 282,\n                        columnNumber: 11\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"span\", {\n                        className: \"absolute inset-0 text-[10px] flex items-center justify-center text-white/80\",\n                        children: [\n                            Math.max(progress, 1),\n                            \"% (\",\n                            Math.round(progress / 100 * totalFiles),\n                            \"/\",\n                            totalFiles,\n                            \")\"\n                        ]\n                    }, void 0, true, {\n                        fileName: \"/Volumes/SilberArrows/CODEBASE/silberarrows_uv/components/modules/uv-crm/components/MediaUploader.tsx\",\n                        lineNumber: 286,\n                        columnNumber: 11\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"/Volumes/SilberArrows/CODEBASE/silberarrows_uv/components/modules/uv-crm/components/MediaUploader.tsx\",\n                lineNumber: 281,\n                columnNumber: 9\n            }, this),\n            failedFiles.length > 0 && /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                className: \"mt-2 text-xs text-red-400\",\n                children: [\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n                        children: \"Failed to upload:\"\n                    }, void 0, false, {\n                        fileName: \"/Volumes/SilberArrows/CODEBASE/silberarrows_uv/components/modules/uv-crm/components/MediaUploader.tsx\",\n                        lineNumber: 293,\n                        columnNumber: 11\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"ul\", {\n                        className: \"list-disc ml-4\",\n                        children: failedFiles.map((param, idx)=>{\n                            let { file, error } = param;\n                            return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"li\", {\n                                children: [\n                                    file.name,\n                                    \": \",\n                                    error\n                                ]\n                            }, idx, true, {\n                                fileName: \"/Volumes/SilberArrows/CODEBASE/silberarrows_uv/components/modules/uv-crm/components/MediaUploader.tsx\",\n                                lineNumber: 296,\n                                columnNumber: 15\n                            }, this);\n                        })\n                    }, void 0, false, {\n                        fileName: \"/Volumes/SilberArrows/CODEBASE/silberarrows_uv/components/modules/uv-crm/components/MediaUploader.tsx\",\n                        lineNumber: 294,\n                        columnNumber: 11\n                    }, this),\n                    /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"button\", {\n                        className: \"mt-1 px-2 py-1 bg-red-600 text-white rounded text-xs hover:bg-red-700\",\n                        onClick: retryFailed,\n                        disabled: retrying,\n                        children: retrying ? 'Retrying...' : 'Retry Failed Uploads'\n                    }, void 0, false, {\n                        fileName: \"/Volumes/SilberArrows/CODEBASE/silberarrows_uv/components/modules/uv-crm/components/MediaUploader.tsx\",\n                        lineNumber: 299,\n                        columnNumber: 11\n                    }, this)\n                ]\n            }, void 0, true, {\n                fileName: \"/Volumes/SilberArrows/CODEBASE/silberarrows_uv/components/modules/uv-crm/components/MediaUploader.tsx\",\n                lineNumber: 292,\n                columnNumber: 9\n            }, this)\n        ]\n    }, void 0, true, {\n        fileName: \"/Volumes/SilberArrows/CODEBASE/silberarrows_uv/components/modules/uv-crm/components/MediaUploader.tsx\",\n        lineNumber: 270,\n        columnNumber: 5\n    }, this);\n}\n_s(MediaUploader, \"8VQVnNzTH/Y7+g0IosAIAGTctC0=\");\n_c = MediaUploader;\nvar _c;\n$RefreshReg$(_c, \"MediaUploader\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./components/modules/uv-crm/components/MediaUploader.tsx\n"));

/***/ })

});